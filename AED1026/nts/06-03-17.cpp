/*
	generation of random numbers

	Pseudo-random Number generators

	are algorithms that use mathematic formulas or precalculated tables 
	to generate sequences of numbers
		-are efficient
		-are deterministic
		-are periodic (eventually will repeat)


	sweepstakes
	--
	True random number generators

	generates randonmess from phisycal phenomena and introduce it to a computer
	these methods:
		-are inefficient (require long periods of time) 
		-are nondeterministic ()
		-nonperiodic

	are used when real randomness is required

	- buffer: canal de datos, especie de contenedor

	--
	Random numbers in c/c++
	c/c++ has a prng wich is implemented in the function rand, from the 
	standar library. This function generates sequencies of pseudo-random numbers
	that are originated from an initial value known as athe seed, which is 
	defined by default in the same library.
	
	the range of values generated by the function rand is 0 to 32767 (RAND_MAX)
 */
/*
	Automatic initialization
	the function time return the number of second elapsed since 0 o'clock on
	january 1, 1970, utx (unix time stamp)

#include <cstdlib>
#include <ctime>

srand(time(NULL));

for (int i = 0; i < 10; i++) {
	printf("%i", rand()):
}

	--
	Generation of long integers
	it is posible to calculate long numbers (even greater than RAND_MAX)
	if we proceed digit by digit

 */

/* 
	probability
	benford
 */

#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

long randlen(int k)
{
	long x = 0;
	for (int i = 0; i < k; i++){
		x *= 10;
		x += rand() %10;
	}
	return x;
}

string longInt(int d)
{
	string x;

	for (int i = 0; i < d; i++) {
		x = x + (char) (rand() % 10 + '0')
	}
}

int main()
{
	srand((unsigned)time(NULL));

	/* range of values 
		it can be manipulated aritmethically	
	*/
//	int n = 1000;

 	/* same sequnce eventually */
//	for (int i = 0; i < 100; i++) {
//		printf("%i\n", rand() % ((2 * n + 1) - n));
//	}

	for (int i = 0; i < 10; i++) {
		long z = randlen(10);
//		printf("%li\n", z);
	}

	string x = longInt(100);
	cout << x << endln;

	return 0;
}
